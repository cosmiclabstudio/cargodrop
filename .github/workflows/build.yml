name: Build CargoDrop

on:
  push:
    branches: [ build ]
  pull_request:
    branches: [ build ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            ext: ""
            cgo_enabled: "1"
          # Windows builds - Use Windows runner for native build
          - os: windows-latest
            goos: windows
            goarch: amd64
            ext: ".exe"
            cgo_enabled: "1"
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: amd64
            ext: ""
            cgo_enabled: "1"
          - os: macos-latest
            goos: darwin
            goarch: arm64
            ext: ""
            cgo_enabled: "1"

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git rev-parse to work

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install Linux dependencies
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxxf86vm-dev

    - name: Get commit hash (Unix)
      if: matrix.os != 'windows-latest'
      id: commit-unix
      run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Get commit hash (Windows)
      if: matrix.os == 'windows-latest'
      id: commit-windows
      run: |
        $hash = git rev-parse --short HEAD
        echo "hash=$hash" >> $env:GITHUB_OUTPUT

    - name: Set build variables (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV
        echo "CGO_ENABLED=${{ matrix.cgo_enabled }}" >> $GITHUB_ENV

    - name: Set build variables (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "GOOS=${{ matrix.goos }}" >> $env:GITHUB_ENV
        echo "GOARCH=${{ matrix.goarch }}" >> $env:GITHUB_ENV
        echo "CGO_ENABLED=${{ matrix.cgo_enabled }}" >> $env:GITHUB_ENV

    - name: Build (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        go build -ldflags "-X main.BuildHash=${{ steps.commit-unix.outputs.hash }}" -o cargodrop${{ matrix.ext }} ./cmd/cargodrop

    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        go build -ldflags "-X main.BuildHash=${{ steps.commit-windows.outputs.hash }}" -o cargodrop${{ matrix.ext }} ./cmd/cargodrop

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cargodrop-${{ matrix.goos }}-${{ matrix.goarch }}
        path: cargodrop${{ matrix.ext }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: ls -la

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cargodrop-linux-amd64/cargodrop
          cargodrop-windows-amd64/cargodrop.exe
          cargodrop-darwin-amd64/cargodrop
          cargodrop-darwin-arm64/cargodrop
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Always create downloadable artifacts for build testing
  create-downloadable-artifacts:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'release'  # Only run when NOT a release

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Display structure of downloaded files
      run: ls -la

    - name: Create combined artifact
      run: |
        mkdir -p combined-builds
        cp cargodrop-linux-amd64/cargodrop combined-builds/cargodrop-linux-amd64
        cp cargodrop-windows-amd64/cargodrop.exe combined-builds/cargodrop-windows-amd64.exe
        cp cargodrop-darwin-amd64/cargodrop combined-builds/cargodrop-darwin-amd64
        cp cargodrop-darwin-arm64/cargodrop combined-builds/cargodrop-darwin-arm64

    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-builds
        path: combined-builds/
        retention-days: 30
